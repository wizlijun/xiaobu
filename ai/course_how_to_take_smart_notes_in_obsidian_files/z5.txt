# 5.0.0 节

另一种减少我们花时间完善系统而非推进思考的风险的方法，是将可以自动化的工作委托给 Obsidian，让这个应用悄悄地引导我们朝着产出方向前进。
这就是 DataView 发挥作用的地方。DataView 是一个可以自动化简单任务并帮助我们跟踪零散线索的插件。
随着你的自定义设置变得越来越复杂，同时进行的项目越来越多，使用 DataView 就越有意义。
它功能极其强大，但对于不熟悉编写代码的人来说可能有点令人望而却步。但别担心，对于我们在这里涵盖的所有用例，我们都提供了模板。
你可以在不编写任何代码的情况下使用它，而且将这些小代码片段适配到你的需求也可以在没有任何先前知识的情况下完成。
同时，我们只会介绍对实际 Zettelkasten 工作流程最有用的内容。
这不是关于 DataView 以及它能做什么，而是关于我们如何使用它来帮助我们保持专注。
我们从最简单的 DataView 查询开始，向你展示一些用例，然后在此基础上逐步构建。


# 5.1.0 节

让我们再来看看索引，这是最明显也是最简单的 Dataview 使用案例
在我们的示例库中当然只有几个笔记。现在点击笔记内的编辑按钮
当你把鼠标悬停在列表上时会出现这个按钮。现在你可以看到脚本，第一行和最后一行
总是相同的，它们告诉 Obsidian 中间的所有内容都是 Dataview 脚本
list 是一个列出所有笔记的命令，第二行指定只列出带有 index 标签的笔记
第三行是按字母顺序升序排列列表。在 person 笔记中你有
相同的脚本，只是用 person 标签代替了 index，这会给你一个包含所有
你用 hashtag person 标记的笔记列表。真的不能再简单了，不会让它变得更加
复杂。现在你可以想出更多列表的想法，也许你决定给所有
你阅读的优秀文章的文献笔记添加标签，现在你可以简单地创建一个你遇到的所有优秀文章的列表
或者你给所有包含特别好想法的重要笔记打标签，现在你可以创建
一个你最佳想法的列表，或者最具挑战性问题的列表，或者你给所有有
突破性时刻的日记添加标签来创建一种智力日记。你明白这个想法。当然你可以使用相同的
Dataview 查询来给自己一个项目、枢纽或内容地图的概览，因为所有这些笔记都有标签
但在这里我们很快就会想要超越简单的按字母顺序排列的列表，所以让我们介绍一些
稍微复杂一点的 Dataview 可能性，让我们从一个帮助我们
在枢纽和索引笔记上精心整理列表的脚本开始


# 5.2.0 节

当我们想要手动精心整理的链接列表，来改进在
反向链接部分自动创建的链接列表时，比如在复杂的索引笔记或
枢纽上，我们需要知道哪些链接已经处理过了，
哪些还没有处理。让我们再次以写作的益处为例，
假设它已经很复杂，我们很难跟踪所有链接到这里的笔记。
现在只需插入我们的模板 data view incoming links not listed 并稍微修改一下。
你只需要将这个笔记替换为你所在笔记的实际名称。
在脚本中，你再次有 data view 部分和列出笔记的命令。
然后你指定要列出所有链接到当前笔记的笔记，但排除那些
从当前笔记链出的笔记。这就是当前笔记进入的链接前面
减号的含义。在这个例子中，我们有两个尚未列出的笔记，如果我在上面添加一个，
你会看到它会在下面被移除。


# 5.3.0 节

现在我们将充分利用continue标签和双栏使用的功能，这在之前的课程中已经描述过了
它们本身就已经非常有用了。我们可以很容易地在各个项目节点和枢纽上看到哪些开放循环，只需在反向链接部分搜索continue标签即可
但通过Dataview，我们现在可以对所有项目和所有枢纽中的所有开放循环有一个概览
这是减少摩擦的绝佳方式，特别是在工作开始的时候，你可以简单地打开Obsidian，立即看到你可以从哪里继续你的工作
当然，这对于简单地掌控全局也是极其有用的
为了给我们自己最好的概览，我们将使用表格，这是我们想在这里介绍的Obsidian和Dataview的下一个功能
我们相信，拥有表格来向我们自己展示这种跨Zettelkasten任务概览，随着你的Zettelkasten变得越来越复杂，会变得越来越有益
但它甚至可能从一开始就改善你的工作体验
简单地知道你有一个地方，所有的开放端都汇聚在一起，这有助于专注于手头的任务，因为你不会为每个松散的端点做心理记录而浪费头脑空间
现在每当你卡住的时候，你都能够切换到其他事情，而不用太担心找不到回来的路
现在让我们看看这个设置在Starter Kit中的样子，让我一点一点地讲解
在continue文件夹中，我们有与continue标签相关的表格，按照信息流的三个阶段分隔：进入、内部和输出
同样，在第一个表格中，你会找到所有关于输入的内容：要添加的事物、要阅读的文献或要从中提取想法的文献
然后你有所有关于永久笔记相互作用的内容：要比较的想法、要思考的问题、要整理的枢纽、要分解的复杂笔记等等
最后是潜在输出候选的管道
好的，让我快速向你展示它在一个填充的库中的样子
我们这里有continue文件夹，有三个文件，按输入、输出和内部的所有内容分隔
表格同样按特定动作分隔
在添加表格中，你只会找到文献笔记和瞬时笔记
你可以从句柄看出来，文献笔记的侧键和每日笔记的日期，也就是瞬时笔记
我有时会指定项目，用project双冒号然后链接到项目笔记
或者用hub双冒号然后链接到相应的枢纽来指定主题
所有要提取和要阅读的内容也只包含文献笔记，这是合理的
让我们暂时忽略Readwise
然后你有输出的管道
正在进行的项目，顶部标明了兴趣领域。
几乎准备好大纲的项目候选。
也就是标有输出标签的枢纽。
有时会有一个工作标题，当输出使用不同标题时。
还有兴趣领域。
然后是仍在开发中的项目候选，以及或多或少只是一个想法的项目候选。
接下来我们有永久笔记部分中相互关联笔记之间相互作用的所有内容。
这里我有一个包含所有笔记的表格。
我觉得应该对它们进行一些整理，或者使用笔记重构插件来分离出一些部分。
我指定了父级，它在主题的另一个表格中。
但在这两种情况下也都通过枢纽双列指定，然后是到相应枢纽的链接。
我添加了文件大小，因为我觉得最需要拆分的笔记是那些最大的。
所以我想看到它们在顶部。
稍有不同的是那些我觉得需要更多连接的笔记。
这里我有外向链接数量和内向链接数量。
因为我觉得它们的链接越少，就越需要连接它们。
对于那些我需要更多区分或者只是想继续处理的笔记，我添加了一个标题为"未触及"的列。
这意味着我已经那么多天没有修改过那个文件了。
这让我想到另一点。
你在前三页看到的所有内容都设定了上限，我想是30天，或者因为这是一个有点实验性的库，是60天。
这意味着任何我超过30天或60天没有触及的内容都会从这个列表中消失。
记住，这些不是待办事项列表。
如果某些东西在那里停留太久并且不受欢迎，它最好消失。
我仍然可以查看完整列表，你会看到它们实际上并没有长太多。


# 5.3.1 节

现在让我们来看看一个简单表格的代码。第一行创建表格并指定应该有什么
列以及列应该如何命名。你有节点的标题，还有一个列用于
我们在相应节点上标示的项目或枢纽。记住我们建议总是添加一行到
继续标签，指定连接的项目或枢纽。我们用这行代码做到了这一点
project双冒号或hub双冒号。双冒号前面的术语是变量
你会在代码中找到的，而后面的内容是变量将被替换的内容。
这可以是纯文本或指向节点的链接。因此你可以使用指向项目的链接
你拥有的节点或者如果你还没有的话用纯文本作为工作标题。当然你也可以
不指定项目或枢纽或两者都不指定。在这些情况下字段会留空。
其次对于非永久节点上的所有继续标签，也就是日常节点和文献节点
我们建议也为每个开放循环添加复选框。这让我们能够轻松地让它们在
我们的开放循环表格中消失，而不会失去在必要时检索它们的可能性。
我们为由Zotero或Readwise插件生成的
日常节点和文献节点设置模板，自动包含复选框。但仅限于这些。
在包括枢纽和MOC的永久笔记上我们不建议使用复选框。这里最好是
在处理完继续标签后完全删除它们。主要是因为我们不希望
重要节点出现混乱，尤其不希望我们搜索开放循环时混入已经处理过的。
对于日常和文献节点这个问题不那么严重，因为我们大多数时候都会把它们过滤掉
复选框足以让它们从视线中消失。那就是我们的dataview表格。
where any file task等等这一行指定只有那些至少有
一个未选中复选框的节点才应该被包含。这里的感叹号是not的符号。
因为这不是待办事项列表，我们为这个表格添加了时间限制。这就是这一行的作用。
这不是待办事项列表。任何超过这里指定天数没有被触及的笔记，
即使仍未选中，也会自动从列表中消失。我们将计时器默认设置为30天。
你可以简单地更改数字。我将我的设置为60天，这是我目前个人的最佳选择
但从反馈中了解到大多数人更喜欢快一点的节奏
需要记住的重要一点是 从这个表格中消失的节点 无论是因为
你勾选了复选框还是因为计时器时间到了 它们本身不会消失 仍然会
在相应的项目或枢纽的反向链接部分中列出 这意味着当你积极处理
这些项目或枢纽时 你会看到它们 我们还将每个表格的标题转换为链接 指向一个节点
该节点包含没有时间限制的每个标签表格 这里我们添加了一个额外的列 显示
一个节点有多长时间没有被触碰过 我们建议大部分时间停留在有
时间限制的主页面上 正如Oliver Bergman说得很好 我们应该把待读堆当作河流
而不是水桶 也就是说 不要把你的积压工作想象成一个逐渐装满的容器
需要你去清空 而要把它当作从你身边流过的溪流
我们认为这适用于所有输入 因此不跟进所有事情是可以的 所以请不要
因为没有跟进你曾经有过或遇到的每一个想法而让自己感到痛苦
记住 一些枢纽甚至项目被搁置是思维过程中完全自然的一部分
兴趣的转移也可能是进步的标志


# 5.3.2 节

当你查看Zettelkasten中持续节点的操作表格时，你会看到我们设置得略有不同。
我们还根据相应的标签将它们分类。这里是排序、连接、阐述和简单推进。
但我们不搜索复选框，因为我们在常规永久笔记上不使用它们。
而不是枢纽的列，我们因此简单地寻找下一个更高阶的节点或父节点，这在节点上用双冒号上标表示，这是我们在Zettelkasten内使用的主要导航工具。
现在，并非所有从一个节点向上的节点都必然是枢纽。
记住，插件node refactor例如，会自动在它分离出来并链接到父节点的每个节点顶部添加这一行。
或者我们手动添加它来表示代表该节点所属节点序列的节点，无论它是否是枢纽。
能够看到不仅是节点标题，还有它所属的更高阶节点，这简单地给了我们一个更好的想法，通过抓住这个松散的线索我们到底可以改进什么。
当涉及到排序、分割时，我们觉得知道节点有多大可能是有帮助的。
当涉及到连接时，我们觉得知道有多少节点已经与这个节点链接可能是有帮助的。
当涉及到区分和简单推进时，我们决定采用未触碰天数。
我们没有对这些节点设置时间限制，因为它们都意在保持突出。
但如果你觉得继续标签不再有用，只需简单地移除它。


# 5.3.3 节

在这里再次提醒大家。核心理念是始终要专注于面向输出的工作。每次打开Obsidian都要有明确的意图，就是在某个项目上取得进展。同时也要留意潜在的新输出想法。在开始阶段，你会从一个想法出发，将Zettelkasten作为进一步发展这个想法的工具。但在工作一段时间后，这个顺序会完全颠倒过来。
现在，大部分关于写什么的想法都会从Zettelkasten内部涌现出来。这当然是有优势的，因为现在这些想法已经站在了坚实的基础上。也就是说，建立在你自己用文字进行的详尽阐述之上。
我们已经描述过如何按发展阶段来标记潜在的候选想法。它只是一个需要测试的想法吗？还是需要进一步发展的东西？
或者是一个已经发展得足够成熟，可以转化为大纲的集群。一个脚本的粗略草稿。
通过持续关注这些潜在的候选想法，我们能够不断地保持输出管道的充实。
你现在拥有的不再是一个主要基于意图的项目想法列表，而是一个基于你已经完成的工作、并且附带了具体材料和已撰写内容的项目想法列表。
如果我们能够做到的话，试着让它们成为自己的Event 2.0。


# 5.4.0 节

现在我们可以轻松地运用之前讨论的内容来帮助我们管理项目
在单个项目节点上 实际上并不需要使用DataView 因为进入的链接部分在这里已经足够有用了
然后我们已经讨论过正在进行项目的流水线
由于大部分工作都在Zettelkasten中完成 标记潜在候选项目并不是项目的开始
这表明我们已经在正在进行的项目上取得了进展 即使有时候这些项目在我们没有意识到的情况下形成
DataView在我们已决定的项目方面的真正优势在于当我们同时进行多个项目时发挥作用
在这里 DataView可以帮助我们掌控全局
首先 如果你同时进行多个项目 创建一个专门的项目概览节点 在那里你可以按照对你最有意义的方式手动排序
也许按优先级 也许按照你排序兴趣领域的方式 但也可能按照你打算在它们上面花费的时间
也许你有一个可能需要几年时间的项目 但对你来说极其重要 你想每天至少花一个小时在上面
为什么不把它放在顶部并突出显示呢
在这里 为了整理项目链接 你可以使用我们之前提到的简单DataView脚本的变体 它会显示所有属于这个页面的节点 但还没有被你在节点的精心整理部分中列出
但这个脚本不是寻找链接到这个页面的节点 而是简单地列出项目文件夹中的所有节点或那些带有项目标签的节点
这应该是相同的 但这样你可以确保收集到了所有项目
你也可以添加流水线中的表格 听取准备转化为项目的候选项目
还有许多变化可能更适合你的需求
例如 你可以为项目节点添加更多元数据 在表格中展示给自己 比如项目的重要性或紧急程度
关于DataView的最后一点
当你更改节点的标题时 你的库中的所有链接都会自动更新
标签也类似 你可以在侧边面板重命名标签 它们会在所有地方同时更新
在这两种情况下不会更新的是DataView查询的代码
如果DataView查询停止工作 检查代码中的链接或标签是否仍然正确
让我们在订单之后添加这个方法
30分钟内 这将在两种情况下进行描述 好的
谢谢


# 5.5.1 节

对于使用 Readwise 的朋友，我们创建了一个专门的笔记以及输入笔记上的表格
两个笔记上的表格基本相同，只是我们在输入笔记的表格中添加了时间限制，这样可以与其他表格保持一致
我们为 Readwise 创建了一个单独的笔记，不仅因为只有部分朋友会使用它，还因为 Readwise 导入信息的门槛非常低，我们需要区别对待
比如说，表格没有指定某个条目与哪个项目或枢纽相关
每次在 Kindle 上高亮内容或保存推文时都添加这些信息会很不实用
我们认为查看 Readwise 自动添加的来源类型更有帮助，比如书籍、文章、推文等
以及我们最后处理这些信息的时间
如你所见，我们还添加了名为文献笔记的列，它会获取变量侧键和双列，然后链接到对应的文献笔记
我们建议在处理 Readwise 来源时手动添加，将其作为正式文献来处理，也就是说，这些文献是可引用的，值得在写作中进一步讨论
这就产生了一个问题，既然 Readwise 已经为我们创建了笔记，为什么还需要额外的文献笔记呢
为什么不直接使用 Readwise 笔记呢
首先，Readwise 推送的大部分内容很可能本身就不可引用，或者更偏向启发性，或者可以简单地当作临时笔记来处理
但如果你确实想要引用它，通过浏览器插件将来源添加到 Zotero 可能仍然是更简单也更干净的做法
但是，如何协调通过 Zotero 和引用插件创建的正式文献笔记与 Readwise 笔记之间的关系呢
让我先解释一下 Obsidian 的 Readwise 插件是如何工作的，然后再回到这个问题
当我们在 Kindle 上高亮内容、在文章中做标记、保存到 Instapaper 或直接保存到 Readwise、保存推文或添加评论时，Readwise 会将这些推送到其官方 Obsidian 插件
插件会为新来源创建新笔记，或者如果我们后来添加了高亮内容，就在已有笔记中添加段落
任何 Readwise 笔记都包含我们在导出设置中指定的元数据
我们指示 Readwise 为推送到 Obsidian 的每个新高亮内容添加复选框
这样我们就可以设置一个表格，只显示至少有一个未选中复选框的 Readwise 笔记
也就是说，当我们处理 Readwise 笔记时，之后只需勾选复选框，它就会从表格中消失
如果我们后来在 Kindle 或其他来源上添加新的高亮内容或评论，Readwise 会将其连同新的复选框一起添加到我们的笔记中
因此它会重新出现在我们的表格中，表明又有未处理的内容
但为了让这个机制正常工作，Readwise 创建的笔记标题和位置不能改变
因此，我们不能简单地通过更改标题并将其移动到文献笔记文件夹中来将 Readwise 笔记转换为文献笔记
我们也不想同时运行两个参考系统，这会抵消拥有单一系统的所有好处。
因此，当我们引用某些内容时，应该通过合适的文献笔记来引用。
这个问题有一个非常简单的解决方案。
这时Readwise笔记上的CiteKey提示就发挥作用了。
使用Zotero Citation插件在其后添加指向合适文献笔记的链接。
记住，如果你还没有文献笔记，它会自动创建一个。
所以真的没什么复杂的。
唯一的前提条件是参考数据已经在Zotero中，
正如之前描述的，我们通常只需点击一个按钮就能添加。
现在我们在Readwise笔记上有了这一行：引用键、双冒号和指向文献笔记的链接，
这使得链接出现在我们的表格中，我们知道有一个合适的文献笔记与之对应。
为了利用Readwise自动将新摘录添加到其笔记的能力，
我们现在可以简单地将实时的Readwise笔记嵌入到合适的文献笔记中。
我们只需在Readwise笔记的笔记部分链接前面添加一个感叹号即可。
这意味着每当Readwise添加新摘录时，它会自动出现在我们的文献笔记上，
准备好让我们在文献笔记本身上进行处理。
或者换句话说，一旦你连接了这两个笔记，
你就完全将Readwise来源整合到了你的参考生态系统中，
无需再回到Readwise笔记。
再次说明，这个额外步骤只对你真正想要引用的书籍或精选文章才有意义。
如果你像处理临时笔记一样处理Readwise笔记，只需点击复选框就完成了。
当然，你也仍然可以在你写的永久笔记上
简单地添加一个链接，指向Readwise笔记，以确保你记住想法的来源。
但只需将其视为添加指向Zettelkasten外部某个网站的超链接。
不要将Readwise笔记整合到你的生态系统中，也不要在它们之间建立链接。
只要把它们当作外部来源处理就可以了


# 5.5.2 节

要完成全部设置，你需要拥有Readwise订阅，安装Obsidian官方的Readwise插件
并且在插件中以及Readwise的导出部分都要进行相应设置
查看我们Starter Kit中的Readwise节点，可以直接复制粘贴我们在这里推荐的设置
不过让我们快速看一下设置，进入Obsidian中Readwise的官方设置
点击自定义，它会引导你到Readwise设置页面，你需要给你的笔记
和文件设置一个自定义名称，这样就不会意外地把Readwise节点和常规的永久笔记
搞混了，我们建议添加前缀rw，然后加上你认为有用的变量，我们推荐作者
标题、分类，正如你可能看到的，我在自己的库中忽略了这个选项，尽管Readwise
很贴心地在这里用我的书作为示例，你也可以指示它下载文档的全文
将其存储在单独文件夹的单独文件中，并从常规Readwise节点添加链接
下面是重命名页面标题和页面元数据的文件，你可以直接从Starter Kit中的Readwise节点复制模板
重要的是，我们在这里添加了侧边栏关键词提示
在高亮标题部分，你会看到我们添加了带有斜杠的复选框和方括号
同样，直接从我们的模板复制并根据你的喜好进行修改


